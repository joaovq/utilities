/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from 'util'
import Ajv = require('ajv')
import Example from './interface-example'
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: 'fast',
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
})

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))

export { Example }
export const ExampleSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  defaultProperties: [],
  definitions: {
    ArrayInterface: {
      defaultProperties: [],
      properties: {
        numberField: {
          type: 'number',
        },
        stringField: {
          type: 'string',
        },
      },
      required: ['numberField', 'stringField'],
      type: 'object',
    },
  },
  properties: {
    arrayField: {
      items: {
        $ref: '#/definitions/ArrayInterface',
      },
      type: 'array',
    },
    dateField: {
      description: 'Enables basic storage and retrieval of dates and times.',
      format: 'date-time',
      type: 'string',
    },
    numberField: {
      type: 'number',
    },
    objectField: {
      defaultProperties: [],
      properties: {
        anotherObjectField: {
          defaultProperties: [],
          properties: {
            stringField: {
              type: 'string',
            },
          },
          required: ['stringField'],
          type: 'object',
        },
        arrayField1: {
          items: {
            type: 'number',
          },
          type: 'array',
        },
        arrayField2: {
          items: {
            $ref: '#/definitions/ArrayInterface',
          },
          type: 'array',
        },
        stringField: {
          type: 'string',
        },
      },
      required: [
        'anotherObjectField',
        'arrayField1',
        'arrayField2',
        'stringField',
      ],
      type: 'object',
    },
    stringField: {
      type: 'string',
    },
  },
  required: [
    'arrayField',
    'dateField',
    'numberField',
    'objectField',
    'stringField',
  ],
  type: 'object',
}
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, 'errors'>
export const isExample = ajv.compile(ExampleSchema) as ValidateFunction<Example>
export default function validate(value: unknown): Example {
  if (isExample(value)) {
    return value
  } else {
    throw new Error(
      ajv.errorsText(
        isExample.errors!.filter((e: any) => e.keyword !== 'if'),
        { dataVar: 'Example' }
      ) +
        '\n\n' +
        inspect(value)
    )
  }
}
